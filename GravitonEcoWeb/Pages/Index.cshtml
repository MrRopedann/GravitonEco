@page
@model IndexModel
@{
    ViewData["Title"] = "Мониторинг данных";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graviton-ECO</title>
    <link rel="stylesheet" href="~/css/index.css" />
    <script src="~/js/Main/LeftTable.js"></script>
    <script src="~/js/Main/RightTable.js"></script>
</head>
<body>
    <div class="main-content">
        <div class="left-panel">
            @if (Model.GroupsData != null && Model.GroupsData.Any())
            {
                @foreach (var group in Model.GroupsData)
                {
                    <h3 class="group-header" group-name="@group.Key" onclick="toggleGroup('@group.Key')">
                        @group.Key @(group.Value ? "(Развернуто)" : "(Свернуто)")
                    </h3>

                    @if (group.Value && Model.GroupedParameters.ContainsKey(group.Key))
                    {
                        @if (group.Key == "Газоанализатор")
                        {
                            <label>
                                <input type="checkbox" id="convertToMolarMass" onchange="toggleMolarMassConversion(this.checked)" />
                                Конвертировать значения измерителя в мг/м3 (Значения установки порогов не конвертируются)
                            </label>
                        }
                        <table>
                            <thead>
                                <tr>
                                    <th class="param">Параметр</th>
                                    <th class="min">Мин.</th>
                                    <th class="max">Макс.</th>
                                    <th class="avg">Сред.</th>
                                    <th class="current">Текущ.</th>
                                    <th class="threshold1">Порог 1</th>
                                    <th class="threshold2">Порог 2</th>
                                    <th class="growth">Нарастание</th>
                                    <th class="period">Период</th>
                                </tr>
                            </thead>
                            <tbody>
                               
                                @foreach (var param in Model.GroupedParameters[group.Key].Select((value, index) => new { Value = value, Index = index }))
                                {
                                    <tr>
                                        <td class="param">@param.Value.Name</td>
                                        <td class="min" id="min-data-@param.Index">@param.Value.Min</td>
                                        <td class="max" id="max-data-@param.Index">@param.Value.Max</td>
                                        <td class="avg" id="avg-data-@param.Index">@param.Value.Average</td>
                                        <td class="current" id="current-data-@param.Index">@param.Value.Current</td>
                                        <td class="threshold1">
                                            <input id="threshold1-data-@param.Index" type="text" value="@param.Value.Threshold1"
                                                   class="numeric-input @(param.Value.AlarmPorog1 ? "warning" : "")"
                                                   onfocus="startEditing()" onblur="stopEditing()"
                                                   onkeydown="submitValue(event, '@param.Value.Name', 'Threshold1', this.value)" />
                                        </td>
                                        <td class="threshold2">
                                            <input id="threshold2-data-@param.Index" type="text" value="@param.Value.Threshold2"
                                                   class="numeric-input @(param.Value.AlarmPorog2 ? "warning" : "")"
                                                   onfocus="startEditing()" onblur="stopEditing()"
                                                   onkeydown="submitValue(event, '@param.Value.Name', 'Threshold2', this.value)" />
                                        </td>
                                        <td class="growth">
                                            <input id="growth-data-@param.Index" type="text" value="@param.Value.Growth"
                                                   class="numeric-input @(param.Value.AlarmPorog3 ? "warning" : "")"
                                                   onfocus="startEditing()" onblur="stopEditing()"
                                                   onkeydown="submitValue(event, '@param.Value.Name', 'Growth', this.value)" />
                                        </td>
                                        <td class="period">
                                            <input id="period-data-@param.Index" type="text" value="@param.Value.Period"
                                                   class="numeric-input @(param.Value.AlarmPorog3 ? "warning" : "")"
                                                   onfocus="startEditing()" onblur="stopEditing()"
                                                   onkeydown="submitValue(event, '@param.Value.Name', 'Period', this.value)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                }
            }
        </div>
        <div class="right-panel">
            @if (Model.GroupsCalibration != null && Model.GroupsCalibration.Any())
            {
                @foreach (var group in Model.GroupsCalibration)
                {
                    <h3 class="group-header" group-name="@group.Key" onclick="toggleCalibrationGroup('@group.Key')">
                        @group.Key @(group.Value ? "(Развернуто)" : "(Свернуто)")
                    </h3>
                    @if (group.Value && Model.GroupedCalibration.ContainsKey(group.Key))
                    {

                        <table>
                            <thead>
                                <tr>
                                    @foreach (var columnName in Model.GetColumnsForGroup(group.Key))
                                    {
                                        <th>@columnName</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var param in Model.GroupedCalibration[group.Key].Select((value, index) => new { Value = value, Index = index }))
                                {
                                <tr>
                                    <td class="param">@param.Value.Name</td>
                                    <td class="current" id="current-calibration-data-@param.Index">@param.Value.CurrentValue</td> <!-- Отображение значения -->

                                    <!-- Поле Уст. Нуля -->
                                    <td class="setting-zero">
                                        <input id="setting-zero-data-@param.Index"
                                               type="text"
                                               value="@param.Value.SettingZero"
                                               class="numeric-input"
                                                   onfocus="startCalibrationEditing()"
                                                   onblur="stopCalibrationEditing()"
                                               onkeydown="submitCalibrationGasValue(event, '@param.Value.Name', 'SettingZero', this.value)" />
                                    </td>

                                    <!-- Поле Конц-я ПГС -->
                                    <td class="pgs-concentration">
                                        <input id="pgs-concentration-data-@param.Index"
                                               type="text"
                                               value="@param.Value.PGSConcentration"
                                               class="numeric-input"
                                                   onfocus="startCalibrationEditing()"
                                                   onblur="stopCalibrationEditing()"
                                               onkeydown="submitCalibrationGasValue(event, '@param.Value.Name', 'PGSConcentration', this.value)" />
                                    </td>

                                    <!-- Поле Знач-е АЦП -->
                                    <td class="adc-value">
                                        <input id="adc-value-data-@param.Index"
                                               type="text"
                                               value="@param.Value.ADCValue"
                                               class="numeric-input"
                                                   onfocus="startCalibrationEditing()"
                                                   onblur="stopCalibrationEditing()"
                                               onkeydown="submitCalibrationGasValue(event, '@param.Value.Name', 'ADCValue', this.value)" />
                                    </td>

                                    <!-- Поле Расчетный "0" -->
                                    <td class="calculated-zero">
                                        <input id="calculated-zero-data-@param.Index"
                                               type="text"
                                               value="@param.Value.CalculatedZero"
                                               class="numeric-input"
                                                   onfocus="startCalibrationEditing()"
                                                   onblur="stopCalibrationEditing()"
                                               onkeydown="submitCalibrationGasValue(event, '@param.Value.Name', 'CalculatedZero', this.value)" />
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    }
                }
            }
</div>

    </div>

    <script>
        function toggleMolarMassConversion(isChecked) {
            fetch('/api/modbus/set-molar-mass-conversion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ shouldConvert: isChecked })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log("Конвертация молярной массы успешно обновлена.");
                    } else {
                        console.error("Ошибка обновления конвертации молярной массы.");
                    }
                })
                .catch(error => console.error("Ошибка при установке конвертации:", error));
        }

        document.addEventListener("DOMContentLoaded", function () {
            const isChecked = localStorage.getItem("convertToMolarMass") === "true";
            document.getElementById("convertToMolarMass").checked = isChecked;
        });
    </script>
</body>
</html>
